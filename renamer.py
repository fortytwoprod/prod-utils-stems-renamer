import os
import re


def clean_file_name(file_name: str, prefix: str = "A") -> str:
    """
    Clean the file name by removing a specified prefix, leading numbers, 
    and leading symbols like "-", "_", or whitespace.

    This function is particularly useful for cleaning up file names 
    generated by Ableton stem exports or similar tools.

    Args:
        file_name (str): The original file name to be cleaned.
        prefix (str, optional): The prefix to remove from the file name. Defaults to "A".

    Returns:
        str: The cleaned file name.

    Examples:
        >>> clean_file_name("A 01 Kick.wav")
        'Kick.wav'
        >>> clean_file_name("A 02_Snare.wav")
        'Snare.wav'
        >>> clean_file_name("01_Bass.wav", prefix="B")
        'Bass.wav'
        >>> clean_file_name("  -_Lead Synth.wav")
        'Lead Synth.wav'
    """
    # Remove the prefix and any whitespace after it if exists
    cleaned = re.sub(rf'^{prefix}\s+', '', file_name)
    # Then remove any numbers at the start of the filename
    cleaned = re.sub(r'^\d+', '', cleaned)
    # Remove any leading symbols like "-", "_" or whitespace
    cleaned = re.sub(r'^[-_ \s]+', '', cleaned)

    return cleaned


def rename_files_single_folder(folder_path: str, prefix: str = "A") -> None:
    """
    Rename audio files in a folder by cleaning their names.

    This function processes all audio files in the specified folder, 
    cleans their names using the `clean_file_name` function, and renames 
    them to the cleaned names. If there are naming conflicts (i.e., two 
    files would result in the same cleaned name), those files are skipped 
    and a warning is printed.

    Args:
        folder_path (str): The path to the folder containing the audio files.
        prefix (str, optional): The prefix to remove from the file names. Defaults to "A".

    Returns:
        None
    """
    # Get a list of audio files in the folder
    audio_exts = ('.wav', '.aif', '.aiff', '.mp3')
    old_file_names = [
        file_name for file_name in os.listdir(folder_path)
        if file_name.lower().endswith(audio_exts)
    ]

    if not old_file_names:
        print("No audio files found.")
        return

    # Generate cleaned file names
    new_file_names = [clean_file_name(file_name, prefix) for file_name in old_file_names]

    # Identify files with naming conflicts
    conflicts = {
        old: new for old, new in zip(old_file_names, new_file_names)
        if new_file_names.count(new) > 1
    }

    if conflicts:
        print("The following files have naming conflicts and will not be renamed:")
        for old, new in conflicts.items():
            print(f'  "{old}" -> "{new}"')

    # Rename files without conflicts
    for old, new in zip(old_file_names, new_file_names):
        if old in conflicts:
            continue
        if old != new:
            old_path = os.path.join(folder_path, old)
            new_path = os.path.join(folder_path, new)
            try:
                os.rename(old_path, new_path)
                print(f'Renamed "{old}" to "{new}"')
            except OSError as e:
                print(f'Error renaming "{old}" to "{new}": {e}')


def rename_files(folder_path: str, prefix: str = "A") -> None:
    """
    Recursively clean and rename audio files in a folder and its subfolders.

    This function traverses the specified folder and all its subfolders,
    cleaning the names of audio files using the `rename_files_single_folder`
    function. It ensures that all audio files are renamed consistently
    according to the cleaning rules defined in `clean_file_name`.

    Args:
        folder_path (str): The path to the root folder containing the audio files.
        prefix (str, optional): The prefix to remove from the file names. Defaults to "A".

    Returns:
        None
    """
    for root, _, _ in os.walk(folder_path):
        print(f'Processing folder: "{root}"')
        rename_files_single_folder(root, prefix)
        print("-" * 40)


if __name__ == "__main__":
    # Specify the folder path and prefix here
    folder_path = "/Users/rr/Desktop/STEMS"  # Replace with your folder path
    prefix = "A"  # Replace with the prefix you want to remove

    # Run the renaming process
    rename_files(folder_path, prefix)
    print("Renaming completed.")